//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace MoralisUnity.EvmApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "https://deep-index.moralis.io/api/v2";
        private MoralisUnity.Tools.IHttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(MoralisUnity.Tools.IHttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(MoralisUnity.Tools.IHttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(MoralisUnity.Tools.IHttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(MoralisUnity.Tools.IHttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFTs by wallet
        /// </summary>
        /// <remarks>
        /// Get NFTs owned by a given address.
        /// <br/>* The response will include status [SYNCED/SYNCING] based on the contracts being indexed.
        /// <br/>* Use the token_address param to get results for a specific contract only
        /// <br/>* Note that results will include all indexed NFTs
        /// <br/>* Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </remarks>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="format">The format of the token ID</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="token_addresses">The addresses to get balances for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned?</param>
        /// <returns>Returns a collection of NFT owners</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftOwnerCollection> GetWalletNFTsAsync(string address, ChainList? chain = null, Format? format = null, int? limit = null, bool? disable_total = null, System.Collections.Generic.IEnumerable<string> token_addresses = null, string cursor = null, bool? normalizeMetadata = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{address}/nft?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (token_addresses != null)
            {
                foreach (var item_ in token_addresses) { urlBuilder_.Append(System.Uri.EscapeDataString("token_addresses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (normalizeMetadata != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("normalizeMetadata") + "=").Append(System.Uri.EscapeDataString(ConvertToString(normalizeMetadata, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftOwnerCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Multiple NFTs
        /// </summary>
        /// <remarks>
        /// Returns an array of NFTs specified in the request.
        /// <br/>* Note that results will include all indexed NFTs
        /// <br/>* Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// <br/>* Only 25 NFTs can be fetched in one API call.
        /// </remarks>
        /// <param name="body">Body</param>
        /// <param name="chain">The chain to query</param>
        /// <returns>Returns a collection of NFT owners</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NftOwner>> GetMultipleNFTsAsync(GetMultipleNftsDto body, ChainList? chain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/getMultipleNFTs?");
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NftOwner>>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT transfers by wallet
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given the wallet and other parameters.
        /// </remarks>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="format">The format of the token ID</param>
        /// <param name="direction">The transfer direction</param>
        /// <param name="from_block">The minimum block number from which to get the transfers
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_block">To get the reserves at this block number</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <returns>Returns a collection of NFT transfers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftTransferCollection> GetWalletNFTTransfersAsync(string address, ChainList? chain = null, Format2? format = null, Direction? direction = null, int? from_block = null, string to_block = null, int? limit = null, bool? disable_total = null, string cursor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{address}/nft/transfers?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftTransferCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT collections by wallet
        /// </summary>
        /// <remarks>
        /// Get NFT collections owned by a given wallet address.
        /// </remarks>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <returns>Returns the NFT collections owned by a wallet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftWalletCollections> GetWalletNFTCollectionsAsync(string address, ChainList? chain = null, int? limit = null, bool? disable_total = null, string cursor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{address}/nft/collections?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftWalletCollections>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFTs by contract
        /// </summary>
        /// <remarks>
        /// Get NFTs for a given contract address, including metadata for all NFTs (where available).
        /// <br/>* Results are limited to 100 per page by default
        /// <br/>* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="format">The format of the token ID</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="totalRanges">The number of subranges to split the results into</param>
        /// <param name="range">The desired subrange to query</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned?</param>
        /// <returns>Returns a collection of NFTs</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftCollection> GetContractNFTsAsync(string address, ChainList? chain = null, Format3? format = null, int? limit = null, bool? disable_total = null, int? totalRanges = null, int? range = null, string cursor = null, bool? normalizeMetadata = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/{address}?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (totalRanges != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("totalRanges") + "=").Append(System.Uri.EscapeDataString(ConvertToString(totalRanges, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (range != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("range") + "=").Append(System.Uri.EscapeDataString(ConvertToString(range, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (normalizeMetadata != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("normalizeMetadata") + "=").Append(System.Uri.EscapeDataString(ConvertToString(normalizeMetadata, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT owners by contract
        /// </summary>
        /// <remarks>
        /// Get owners of NFTs for a given contract.
        /// <br/>* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="format">The format of the token ID</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned?</param>
        /// <returns>Returns a collection of NFT owners</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftOwnerCollection> GetNFTOwnersAsync(string address, ChainList? chain = null, Format4? format = null, int? limit = null, bool? disable_total = null, string cursor = null, bool? normalizeMetadata = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/{address}/owners?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (normalizeMetadata != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("normalizeMetadata") + "=").Append(System.Uri.EscapeDataString(ConvertToString(normalizeMetadata, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftOwnerCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT transfers by contract
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs for a given contract and other parameters.
        /// </remarks>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="from_block">The minimum block number from where to get the transfers
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_block">The maximum block number from where to get the transfers.
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="from_date">The date from where to get the transfers (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_date">Get transfers up until this date (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="format">The format of the token ID</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <returns>Returns a collection of NFT transfers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftTransferCollection> GetNFTContractTransfersAsync(string address, ChainList? chain = null, int? from_block = null, int? to_block = null, string from_date = null, string to_date = null, Format5? format = null, int? limit = null, bool? disable_total = null, string cursor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/{address}/transfers?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftTransferCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT transfers from a block to a block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs from a block number to a block number.
        /// </remarks>
        /// <param name="chain">The chain to query</param>
        /// <param name="from_block">The minimum block number from which to get the transfers
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_block">The maximum block number from which to get the transfers.
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="from_date">The start date from which to get the transfers (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_date">The end date from which to get the transfers (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="format">The format of the token ID</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)</param>
        /// <returns>Returns a collection of NFT transfers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersFromToBlockAsync(ChainList? chain = null, int? from_block = null, int? to_block = null, string from_date = null, string to_date = null, Format6? format = null, int? limit = null, bool? disable_total = null, string cursor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/transfers?");
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftTransferCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT transfers by block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given a block number or block hash.
        /// </remarks>
        /// <param name="block_number_or_hash">The block number or block hash</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <returns>Returns the contents of a block</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersByBlockAsync(string block_number_or_hash, ChainList? chain = null, int? limit = null, bool? disable_total = null, string cursor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (block_number_or_hash == null)
                throw new System.ArgumentNullException("block_number_or_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/block/{block_number_or_hash}/nft/transfers?");
            urlBuilder_.Replace("{block_number_or_hash}", System.Uri.EscapeDataString(ConvertToString(block_number_or_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftTransferCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT trades by marketplace
        /// </summary>
        /// <remarks>
        /// Get trades of NFTs for a given contract and marketplace.
        /// </remarks>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="from_block">The minimum block number from which to get the transfers
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_block">The block number to get the trades from</param>
        /// <param name="from_date">The start date from which to get the transfers (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_date">The end date from which to get the transfers (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <returns>Returns the trades</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TradeCollection> GetNFTTradesAsync(string address, ChainList? chain = null, int? from_block = null, string to_block = null, string from_date = null, string to_date = null, Marketplace? marketplace = null, string cursor = null, int? limit = null, bool? disable_total = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/{address}/trades?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (marketplace != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("marketplace") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplace, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TradeCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT collection metadata
        /// </summary>
        /// <remarks>
        /// Get the collection / contract level metadata for a given contract (name, symbol, base token URI).
        /// <br/>* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection
        /// </remarks>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query</param>
        /// <returns>Returns the metadata for an NFT collection.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftContractMetadata> GetNFTContractMetadataAsync(string address, ChainList? chain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/{address}/metadata?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftContractMetadata>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT metadata
        /// </summary>
        /// <remarks>
        /// Get NFT data, including metadata (where available), for the given NFT token ID and contract address.
        /// <br/>* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection
        /// </remarks>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="token_id">The ID of the token</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="format">The format of the token ID</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned?</param>
        /// <returns>Returns the specified NFT.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Nft> GetNFTMetadataAsync(string address, string token_id, ChainList? chain = null, Format7? format = null, bool? normalizeMetadata = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            if (token_id == null)
                throw new System.ArgumentNullException("token_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/{address}/{token_id}?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{token_id}", System.Uri.EscapeDataString(ConvertToString(token_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (normalizeMetadata != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("normalizeMetadata") + "=").Append(System.Uri.EscapeDataString(ConvertToString(normalizeMetadata, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Nft>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT transfers by token ID
        /// </summary>
        /// <remarks>
        /// Get transfers of an NFT given a contract address and token ID.
        /// </remarks>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="token_id">The ID of the token</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="format">The format of the token ID</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <returns>Returns a collection of NFT transfers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersAsync(string address, string token_id, ChainList? chain = null, Format8? format = null, int? limit = null, bool? disable_total = null, string cursor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            if (token_id == null)
                throw new System.ArgumentNullException("token_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/{address}/{token_id}/transfers?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{token_id}", System.Uri.EscapeDataString(ConvertToString(token_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftTransferCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT owners by token ID
        /// </summary>
        /// <remarks>
        /// Get owners of a specific NFT given the contract address and token ID. 
        /// <br/>* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection
        /// </remarks>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="token_id">The ID of the token</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="format">The format of the token ID</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned?</param>
        /// <returns>Returns a collection of NFTs with their respective owners.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftOwnerCollection> GetNFTTokenIdOwnersAsync(string address, string token_id, ChainList? chain = null, Format9? format = null, int? limit = null, bool? disable_total = null, string cursor = null, bool? normalizeMetadata = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            if (token_id == null)
                throw new System.ArgumentNullException("token_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/{address}/{token_id}/owners?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{token_id}", System.Uri.EscapeDataString(ConvertToString(token_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (normalizeMetadata != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("normalizeMetadata") + "=").Append(System.Uri.EscapeDataString(ConvertToString(normalizeMetadata, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftOwnerCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resync NFT Contract
        /// </summary>
        /// <remarks>
        /// Initiates a sync of a previously non synced contract.
        /// </remarks>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query</param>
        /// <returns>Contract address was triggered for index.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task SyncNFTContractAsync(string address, ChainList? chain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/{address}/sync?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resync NFT metadata
        /// </summary>
        /// <remarks>
        /// Resync the metadata for an NFT
        /// <br/>* The metadata flag will request the NFT's metadata from an already existing token_uri
        /// <br/>* The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched
        /// <br/>* The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding
        /// <br/>* The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding
        /// </remarks>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="token_id">The ID of the token</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="flag">The type of resync to operate</param>
        /// <param name="mode">To define the behaviour of the endpoint</param>
        /// <returns>(In sync mode) Resync request executed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MetadataResync> ReSyncMetadataAsync(string address, string token_id, ChainList? chain = null, Flag? flag = null, Mode? mode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            if (token_id == null)
                throw new System.ArgumentNullException("token_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/{address}/{token_id}/metadata/resync?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{token_id}", System.Uri.EscapeDataString(ConvertToString(token_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (flag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("flag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(flag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MetadataResync>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MetadataResync>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MetadataResync>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MetadataResync>("(In sync mode) Resync request executed and metadata could not be updated.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT lowest price
        /// </summary>
        /// <remarks>
        /// Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </remarks>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="days">The number of days to look back to find the lowest price
        /// <br/>If not provided 7 days will be the default</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment)</param>
        /// <returns>Returns the trade with the lowest price</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Trade> GetNFTLowestPriceAsync(string address, ChainList? chain = null, int? days = null, Marketplace2? marketplace = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/{address}/lowestprice?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (days != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("days") + "=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (marketplace != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("marketplace") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketplace, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Trade>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Get NFTs that match a given metadata search query.
        /// </remarks>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="format">The format of the token ID</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to 'global'. To have a better response time you can look into a specific field like name</param>
        /// <param name="from_block">The minimum block number from which to start the search
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_block">The maximum block number from which to end the search
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="from_date">The date from which to start the search (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_date">Get search results up until this date (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="addresses">The addresses to get metadata for</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <returns>Returns the matching NFTs</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NftMetadataCollection> SearchNFTsAsync(string q, ChainList? chain = null, Format10? format = null, Filter? filter = null, int? from_block = null, int? to_block = null, string from_date = null, string to_date = null, System.Collections.Generic.IEnumerable<string> addresses = null, string cursor = null, int? limit = null, bool? disable_total = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (q == null)
                throw new System.ArgumentNullException("q");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nft/search?");
            urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (addresses != null)
            {
                foreach (var item_ in addresses) { urlBuilder_.Append(System.Uri.EscapeDataString("addresses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NftMetadataCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get ERC20 token price
        /// </summary>
        /// <remarks>
        /// Get the token price denominated in the blockchain's native token and USD.
        /// </remarks>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="exchange">The factory name or address of the token exchange</param>
        /// <param name="to_block">The block number from which the token price should be checked</param>
        /// <returns>Returns the price denominated in the blockchain's native token and USD for a given token contract address</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Erc20Price> GetTokenPriceAsync(string address, ChainList? chain = null, string exchange = null, int? to_block = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/erc20/{address}/price?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exchange != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exchange") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exchange, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Erc20Price>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get ERC20 token balance by wallet
        /// </summary>
        /// <remarks>
        /// Get token balances for a specific wallet address.
        /// </remarks>
        /// <param name="address">The address from which token balances will be checked</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="to_block">The block number from which the balances should be checked</param>
        /// <param name="token_addresses">The addresses to get balances for (optional)</param>
        /// <returns>Returns token balances for a specific address</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Erc20TokenBalance>> GetWalletTokenBalancesAsync(string address, ChainList? chain = null, double? to_block = null, System.Collections.Generic.IEnumerable<string> token_addresses = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{address}/erc20?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (token_addresses != null)
            {
                foreach (var item_ in token_addresses) { urlBuilder_.Append(System.Uri.EscapeDataString("token_addresses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Erc20TokenBalance>>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get ERC20 token transactions by wallet
        /// </summary>
        /// <remarks>
        /// Get ERC20 token transactions ordered by block number in descending order.
        /// </remarks>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="from_block">The minimum block number from which to get the transactions
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_block">The maximum block number from which to get the transactions.
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="from_date">The start date from which to get the transactions (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_date">Get the transactions up to this date (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <returns>Returns a collection of token transactions.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Erc20TransactionCollection> GetWalletTokenTransfersAsync(string address, ChainList? chain = null, int? from_block = null, int? to_block = null, string from_date = null, string to_date = null, int? limit = null, bool? disable_total = null, string cursor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{address}/erc20/transfers?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Erc20TransactionCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get ERC20 token metadata by contract
        /// </summary>
        /// <remarks>
        /// Get the metadata for a given token contract address (name, symbol, decimals, logo).
        /// </remarks>
        /// <param name="addresses">The addresses to get metadata for</param>
        /// <param name="chain">The chain to query</param>
        /// <returns>Get the metadata for a given ERC20 token contract address (name, symbol, decimals, logo).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Erc20Metadata>> GetTokenMetadataAsync(System.Collections.Generic.IEnumerable<string> addresses, ChainList? chain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (addresses == null)
                throw new System.ArgumentNullException("addresses");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/erc20/metadata?");
            foreach (var item_ in addresses) { urlBuilder_.Append(System.Uri.EscapeDataString("addresses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Erc20Metadata>>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get ERC20 token metadata by symbols
        /// </summary>
        /// <remarks>
        /// Get the metadata for a list of token symbols (name, symbol, decimals, logo).
        /// </remarks>
        /// <param name="symbols">The symbols to get metadata for</param>
        /// <param name="chain">The chain to query</param>
        /// <returns>Returns metadata for a given token contract address (name, symbol, decimals, logo).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Erc20Metadata>> GetTokenMetadataBySymbolAsync(System.Collections.Generic.IEnumerable<string> symbols, ChainList? chain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (symbols == null)
                throw new System.ArgumentNullException("symbols");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/erc20/metadata/symbols?");
            foreach (var item_ in symbols) { urlBuilder_.Append(System.Uri.EscapeDataString("symbols") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Erc20Metadata>>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get ERC20 token allowance
        /// </summary>
        /// <remarks>
        /// Get the amount which the spender is allowed to withdraw on behalf of the owner.
        /// </remarks>
        /// <param name="address">The address of the token contract</param>
        /// <param name="owner_address">The address of the token owner</param>
        /// <param name="spender_address">The address of the token spender</param>
        /// <param name="chain">The chain to query</param>
        /// <returns>Returns the amount which the spender is allowed to withdraw on behalf of the owner.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Erc20Allowance> GetTokenAllowanceAsync(string address, string owner_address, string spender_address, ChainList? chain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            if (owner_address == null)
                throw new System.ArgumentNullException("owner_address");

            if (spender_address == null)
                throw new System.ArgumentNullException("spender_address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/erc20/{address}/allowance?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("owner_address") + "=").Append(System.Uri.EscapeDataString(ConvertToString(owner_address, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("spender_address") + "=").Append(System.Uri.EscapeDataString(ConvertToString(spender_address, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Erc20Allowance>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get ERC20 token transactions by contract
        /// </summary>
        /// <remarks>
        /// Get ERC20 token transactions from a contract ordered by block number in descending order.
        /// </remarks>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="from_block">The minimum block number from which to get the transfers
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_block">The maximum block number from which to get the transfers.
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="from_date">The start date from which to get the transfers (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_date">Get the transfers up to this date (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <returns>Returns a collection of token contract transactions.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Erc20TransactionCollection> GetTokenTransfersAsync(string address, ChainList? chain = null, int? from_block = null, int? to_block = null, string from_date = null, string to_date = null, int? limit = null, bool? disable_total = null, string cursor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/erc20/{address}/transfers?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Erc20TransactionCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get native balance by wallet
        /// </summary>
        /// <remarks>
        /// Get the native balance for a specific wallet address.
        /// </remarks>
        /// <param name="address">The address from which the native balance will be checked</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="to_block">The block number from which the balances should be checked</param>
        /// <returns>Returns the native balance for a specific address</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NativeBalance> GetNativeBalanceAsync(string address, ChainList? chain = null, double? to_block = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{address}/balance?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NativeBalance>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get balance for a set of wallet
        /// </summary>
        /// <remarks>
        /// Get the native balances for a set of specific addresses
        /// </remarks>
        /// <param name="wallet_addresses">The addresses to get metadata for</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="providerUrl">The web3 provider URL to use when using local dev chain</param>
        /// <param name="to_block">The block number on which the balances should be checked</param>
        /// <returns>Returns a collection of balances</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> GetNativeBalancesForAddressesAsync(System.Collections.Generic.IEnumerable<string> wallet_addresses, ChainList? chain = null, string providerUrl = null, double? to_block = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (wallet_addresses == null)
                throw new System.ArgumentNullException("wallet_addresses");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/wallets/balances?");
            foreach (var item_ in wallet_addresses) { urlBuilder_.Append(System.Uri.EscapeDataString("wallet_addresses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (providerUrl != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("providerUrl") + "=").Append(System.Uri.EscapeDataString(ConvertToString(providerUrl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get native transactions by wallet
        /// </summary>
        /// <remarks>
        /// Get native transactions ordered by block number in descending order.
        /// </remarks>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="from_block">The minimum block number from which to get the transactions
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_block">The maximum block number from which to get the transactions.
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="from_date">The start date from which to get the transactions (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_date">Get the transactions up to this date (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <returns>Returns a collection of native transactions.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransactionCollection> GetWalletTransactionsAsync(string address, ChainList? chain = null, int? from_block = null, int? to_block = null, string from_date = null, string to_date = null, string cursor = null, int? limit = null, bool? disable_total = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{address}?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransactionCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get verbose transactions by wallet
        /// </summary>
        /// <remarks>
        /// Get native transactions and logs ordered by block number in descending order.
        /// </remarks>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="from_block">The minimum block number from which to get the transactions
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_block">The maximum block number from which to get the transactions.
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="from_date">The start date from which to get the transactions (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_date">Get the transactions up to this date (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <returns>Returns a collection of native transactions.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransactionCollectionVerbose> GetWalletTransactionsVerboseAsync(string address, ChainList? chain = null, int? from_block = null, int? to_block = null, string from_date = null, string to_date = null, string cursor = null, int? limit = null, bool? disable_total = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{address}/verbose?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransactionCollectionVerbose>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get transaction by hash
        /// </summary>
        /// <remarks>
        /// Get the contents of a transaction by the given transaction hash.
        /// </remarks>
        /// <param name="transaction_hash">The transaction hash</param>
        /// <param name="chain">The chain to query</param>
        /// <returns>Transaction details by transaction hash</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BlockTransaction> GetTransactionAsync(string transaction_hash, ChainList? chain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (transaction_hash == null)
                throw new System.ArgumentNullException("transaction_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/transaction/{transaction_hash}?");
            urlBuilder_.Replace("{transaction_hash}", System.Uri.EscapeDataString(ConvertToString(transaction_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BlockTransaction>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get block by hash
        /// </summary>
        /// <remarks>
        /// Get the contents of a block given the block hash.
        /// </remarks>
        /// <param name="block_number_or_hash">The block number or block hash</param>
        /// <param name="chain">The chain to query</param>
        /// <returns>Returns the contents of a block</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Block> GetBlockAsync(string block_number_or_hash, ChainList? chain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (block_number_or_hash == null)
                throw new System.ArgumentNullException("block_number_or_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/block/{block_number_or_hash}?");
            urlBuilder_.Replace("{block_number_or_hash}", System.Uri.EscapeDataString(ConvertToString(block_number_or_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Block>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get block by date
        /// </summary>
        /// <remarks>
        /// Get the closest block given the date.
        /// </remarks>
        /// <param name="date">Unix date in milliseconds or a datestring (any format that is accepted by momentjs)</param>
        /// <param name="chain">The chain to query</param>
        /// <returns>Returns the block number and corresponding date and timestamp</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BlockDate> GetDateToBlockAsync(string date, ChainList? chain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (date == null)
                throw new System.ArgumentNullException("date");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/dateToBlock?");
            urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BlockDate>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get logs by contract
        /// </summary>
        /// <remarks>
        /// Get the logs for a contract.
        /// </remarks>
        /// <param name="address">The address of the contract</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="block_number">The block number
        /// <br/>* Provide the param 'block_numer' or ('from_block' and / or 'to_block')
        /// <br/>* If 'block_numer' is provided in combination with 'from_block' and / or 'to_block', 'block_number' will will be used</param>
        /// <param name="from_block">The minimum block number from which to get the logs
        /// <br/>* Provide the param 'block_numer' or ('from_block' and / or 'to_block')
        /// <br/>* If 'block_numer' is provided in combination with 'from_block' and / or 'to_block', 'block_number' will will be used</param>
        /// <param name="to_block">The maximum block number from which to get the logs
        /// <br/>* Provide the param 'block_numer' or ('from_block' and / or 'to_block')
        /// <br/>* If 'block_numer' is provided in combination with 'from_block' and / or 'to_block', 'block_number' will will be used</param>
        /// <param name="from_date">The start date from which to get the logs (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.
        /// <br/>* If 'from_date' and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them</param>
        /// <param name="to_date">Get the logs up to this date (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.
        /// <br/>* If 'to_date' and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them</param>
        /// <param name="topic0">topic0</param>
        /// <param name="topic1">topic1</param>
        /// <param name="topic2">topic2</param>
        /// <param name="topic3">topic3</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page).</param>
        /// <returns>Returns the logs for an address</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LogCollection> GetContractLogsAsync(string address, ChainList? chain = null, string block_number = null, string from_block = null, string to_block = null, string from_date = null, string to_date = null, string topic0 = null, string topic1 = null, string topic2 = null, string topic3 = null, int? limit = null, bool? disable_total = null, string cursor = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{address}/logs?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (block_number != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("block_number") + "=").Append(System.Uri.EscapeDataString(ConvertToString(block_number, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (topic0 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("topic0") + "=").Append(System.Uri.EscapeDataString(ConvertToString(topic0, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (topic1 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("topic1") + "=").Append(System.Uri.EscapeDataString(ConvertToString(topic1, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (topic2 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("topic2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(topic2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (topic3 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("topic3") + "=").Append(System.Uri.EscapeDataString(ConvertToString(topic3, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cursor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cursor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LogCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get events by contract
        /// </summary>
        /// <remarks>
        /// Get events for a contract ordered by block number in descending order. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Events/getContractEvents).
        /// </remarks>
        /// <param name="address">The address of the contract</param>
        /// <param name="topic">The topic of the event</param>
        /// <param name="body">ABI of the specific event</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="from_block">The minimum block number from which to get the logs
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_block">The maximum block number from which to get the logs.
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="from_date">The start date from which to get the logs (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'from_block' or 'from_date'
        /// <br/>* If 'from_date' and 'from_block' are provided, 'from_block' will be used.</param>
        /// <param name="to_date">Get the logs up to this date (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <param name="offset">offset</param>
        /// <param name="limit">The desired page size of the result.</param>
        /// <param name="disable_total">If the result should skip returning the total count (Improves performance).</param>
        /// <returns>Returns a collection of events by topic</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GetContractEventsAsync(string address, string topic, object body = null, ChainList? chain = null, int? from_block = null, int? to_block = null, string from_date = null, string to_date = null, int? offset = null, int? limit = null, bool? disable_total = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            if (topic == null)
                throw new System.ArgumentNullException("topic");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{address}/events?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("topic") + "=").Append(System.Uri.EscapeDataString(ConvertToString(topic, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (disable_total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("disable_total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(disable_total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Run contract function
        /// </summary>
        /// <remarks>
        /// Run a given function of a contract ABI and retrieve readonly data. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Utils/runContractFunction).
        /// </remarks>
        /// <param name="body">Body</param>
        /// <param name="address">The address of the contract</param>
        /// <param name="function_name">The function name of the contract</param>
        /// <param name="chain">The chain to query</param>
        /// <returns>Returns response of the function executed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> RunContractFunctionAsync(RunContractDto body, string address, string function_name, ChainList? chain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            if (function_name == null)
                throw new System.ArgumentNullException("function_name");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{address}/function?");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("function_name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(function_name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get API version
        /// </summary>
        /// <remarks>
        /// Get the current version of the Moralis Web3 API.
        /// </remarks>
        /// <returns>Get the current version of the Moralis Web3 API.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Web3version> Web3ApiVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/web3/version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Web3version>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get weights of endpoints
        /// </summary>
        /// <remarks>
        /// Get the cost and rate limit for each API endpoint.
        /// </remarks>
        /// <returns>The cost and rate limit for each API endpoint.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EndpointWeights>> EndpointWeightsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/info/endpointWeights");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EndpointWeights>>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resolve ENS domain
        /// </summary>
        /// <remarks>
        /// Reverse resolve a given ETH address to its ENS domain.
        /// </remarks>
        /// <param name="address">The address to be resolved</param>
        /// <returns>Returns an ENS</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ens> ResolveAddressAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/resolve/{address}/reverse");
            urlBuilder_.Replace("{address}", System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ens>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resolve Unstoppable domain
        /// </summary>
        /// <remarks>
        /// Resolve a specific Unstoppable domain to its address.
        /// </remarks>
        /// <param name="domain">The domain to be resolved</param>
        /// <param name="currency">The currency to query</param>
        /// <returns>Returns an address</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Resolve> ResolveDomainAsync(string domain, Currency? currency = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (domain == null)
                throw new System.ArgumentNullException("domain");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/resolve/{domain}?");
            urlBuilder_.Replace("{domain}", System.Uri.EscapeDataString(ConvertToString(domain, System.Globalization.CultureInfo.InvariantCulture)));
            if (currency != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Resolve>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Returns an address", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get DEX token pair reserves
        /// </summary>
        /// <remarks>
        /// Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.
        /// </remarks>
        /// <param name="pair_address">The liquidity pair address</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="to_block">The block number to get the reserves from</param>
        /// <param name="to_date">Get the reserves up to this date (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <returns>Returns the pair reserves</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response2> GetPairReservesAsync(string pair_address, ChainList? chain = null, string to_block = null, string to_date = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (pair_address == null)
                throw new System.ArgumentNullException("pair_address");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{pair_address}/reserves?");
            urlBuilder_.Replace("{pair_address}", System.Uri.EscapeDataString(ConvertToString(pair_address, System.Globalization.CultureInfo.InvariantCulture)));
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get DEX token pair address
        /// </summary>
        /// <remarks>
        /// Fetch the pair data of the provided token0+token1 combination.
        /// <br/>The token0 and token1 options are interchangable (ie. there is no different outcome in "token0=WETH and token1=USDT" or "token0=USDT and token1=WETH")
        /// </remarks>
        /// <param name="exchange">The factory name or address of the token exchange</param>
        /// <param name="token0_address">The token0 address</param>
        /// <param name="token1_address">The token1 address</param>
        /// <param name="chain">The chain to query</param>
        /// <param name="to_block">The block number to get the reserves from</param>
        /// <param name="to_date">Get the reserves up to this date (any format that is accepted by momentjs)
        /// <br/>* Provide the param 'to_block' or 'to_date'
        /// <br/>* If 'to_date' and 'to_block' are provided, 'to_block' will be used.</param>
        /// <returns>Returns the pair address of the two tokens.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReservesCollection> GetPairAddressAsync(Exchange exchange, string token0_address, string token1_address, ChainList? chain = null, string to_block = null, string to_date = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (token0_address == null)
                throw new System.ArgumentNullException("token0_address");

            if (token1_address == null)
                throw new System.ArgumentNullException("token1_address");

            if (exchange == null)
                throw new System.ArgumentNullException("exchange");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{token0_address}/{token1_address}/pairAddress?");
            urlBuilder_.Replace("{token0_address}", System.Uri.EscapeDataString(ConvertToString(token0_address, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{token1_address}", System.Uri.EscapeDataString(ConvertToString(token1_address, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("exchange") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exchange, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (chain != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chain") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_block != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_block") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_block, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (to_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("to_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(to_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReservesCollection>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload folder to IPFS
        /// </summary>
        /// <remarks>
        /// Upload multiple files to IPFS and place them in a folder directory.
        /// </remarks>
        /// <param name="body">Array of JSON and Base64 Supported</param>
        /// <returns>Returns the path to the uploaded files</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IpfsFile>> UploadFolderAsync(System.Collections.Generic.IEnumerable<IpfsFileRequest> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ipfs/uploadFolder");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<IpfsFile>>(response_, headers_, cancellationToken);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync();
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync();
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync())
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogCollection
    {
        /// <summary>
        /// The total number of matches for this query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }

        /// <summary>
        /// The cursor to get to the next page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cursor { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LogEventByAddress> Result { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogEventByAddress
    {
        /// <summary>
        /// The transaction hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_hash { get; set; }

        /// <summary>
        /// The address of the contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// The block timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_timestamp { get; set; }

        /// <summary>
        /// The block number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The block hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_hash { get; set; }

        /// <summary>
        /// The data of the log
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        [Newtonsoft.Json.JsonProperty("topic0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Topic0 { get; set; }

        [Newtonsoft.Json.JsonProperty("topic1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Topic1 { get; set; }

        [Newtonsoft.Json.JsonProperty("topic2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Topic2 { get; set; }

        [Newtonsoft.Json.JsonProperty("topic3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Topic3 { get; set; }

        /// <summary>
        /// The Transaction index of the log within the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Transaction_index { get; set; }

        /// <summary>
        /// The log index of the log within the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("log_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Log_index { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogEvent
    {
        /// <summary>
        /// The transaction hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_hash { get; set; }

        /// <summary>
        /// The address of the contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// The block timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_timestamp { get; set; }

        /// <summary>
        /// The block number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The block hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_hash { get; set; }

        /// <summary>
        /// The content of the event
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data Data { get; set; } = new Data();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Log
    {
        [Newtonsoft.Json.JsonProperty("log_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Log_index { get; set; }

        /// <summary>
        /// The hash of the transaction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_hash { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_index { get; set; }

        /// <summary>
        /// The address of the contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// The data of the log
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        [Newtonsoft.Json.JsonProperty("topic0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Topic0 { get; set; }

        [Newtonsoft.Json.JsonProperty("topic1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Topic1 { get; set; }

        [Newtonsoft.Json.JsonProperty("topic2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Topic2 { get; set; }

        [Newtonsoft.Json.JsonProperty("topic3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Topic3 { get; set; }

        /// <summary>
        /// The timestamp of the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_timestamp { get; set; }

        /// <summary>
        /// The block number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The hash of the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_hash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlockTransaction
    {
        /// <summary>
        /// The hash of the transaction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }

        /// <summary>
        /// The nonce
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nonce { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_index { get; set; }

        /// <summary>
        /// The from address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From_address { get; set; }

        /// <summary>
        /// The to address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To_address { get; set; }

        /// <summary>
        /// The value sent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gas { get; set; }

        /// <summary>
        /// The gas price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gas_price { get; set; }

        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Input { get; set; }

        [Newtonsoft.Json.JsonProperty("receipt_cumulative_gas_used", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt_cumulative_gas_used { get; set; }

        [Newtonsoft.Json.JsonProperty("receipt_gas_used", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt_gas_used { get; set; }

        [Newtonsoft.Json.JsonProperty("receipt_contract_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt_contract_address { get; set; }

        [Newtonsoft.Json.JsonProperty("receipt_root", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt_root { get; set; }

        [Newtonsoft.Json.JsonProperty("receipt_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt_status { get; set; }

        /// <summary>
        /// The block timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_timestamp { get; set; }

        /// <summary>
        /// The block number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The hash of the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_hash { get; set; }

        /// <summary>
        /// The logs of the transaction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Log> Logs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Block
    {
        /// <summary>
        /// The block timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }

        /// <summary>
        /// The block number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>
        /// The block hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }

        /// <summary>
        /// The block hash of the parent block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parent_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parent_hash { get; set; }

        /// <summary>
        /// The nonce
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nonce { get; set; }

        [Newtonsoft.Json.JsonProperty("sha3_uncles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha3_uncles { get; set; }

        [Newtonsoft.Json.JsonProperty("logs_bloom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logs_bloom { get; set; }

        [Newtonsoft.Json.JsonProperty("transactions_root", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transactions_root { get; set; }

        [Newtonsoft.Json.JsonProperty("state_root", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State_root { get; set; }

        [Newtonsoft.Json.JsonProperty("receipts_root", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipts_root { get; set; }

        /// <summary>
        /// The address of the miner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("miner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Miner { get; set; }

        /// <summary>
        /// The difficulty of the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("difficulty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Difficulty { get; set; }

        /// <summary>
        /// The total difficulty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_difficulty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Total_difficulty { get; set; }

        /// <summary>
        /// The block size
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Size { get; set; }

        [Newtonsoft.Json.JsonProperty("extra_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extra_data { get; set; }

        /// <summary>
        /// The gas limit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gas_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gas_limit { get; set; }

        /// <summary>
        /// The gas used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gas_used", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gas_used { get; set; }

        /// <summary>
        /// The number of transactions in the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_count { get; set; }

        /// <summary>
        /// The transactions in the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BlockTransaction> Transactions { get; set; } = new System.Collections.ObjectModel.Collection<BlockTransaction>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlockDate
    {
        /// <summary>
        /// The date of the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        /// <summary>
        /// The block number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Block { get; set; }

        /// <summary>
        /// The timestamp of the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Timestamp { get; set; }

        /// <summary>
        /// The timestamp of the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_timestamp { get; set; }

        /// <summary>
        /// The block hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }

        /// <summary>
        /// The block hash of the parent block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parent_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parent_hash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RunContractDto
    {
        /// <summary>
        /// The contract ABI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("abi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Abi { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        /// <summary>
        /// The params for the given function
        /// </summary>
        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Params { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenItem
    {
        /// <summary>
        /// The contract address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_address { get; set; }

        /// <summary>
        /// The id of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMultipleNftsDto
    {
        /// <summary>
        /// The tokens to be fetched (max 25 tokens)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tokens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TokenItem> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<TokenItem>();

        /// <summary>
        /// Should normalized metadata be returned?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("normalizeMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NormalizeMetadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionCollection
    {
        /// <summary>
        /// The total number of matches for this query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transaction> Result { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionCollectionVerbose
    {
        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BlockTransaction> Result { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transaction
    {
        /// <summary>
        /// The hash of the transaction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }

        /// <summary>
        /// The nonce of the transaction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nonce { get; set; }

        /// <summary>
        /// The transaction index
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_index { get; set; }

        /// <summary>
        /// The sender
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From_address { get; set; }

        /// <summary>
        /// The recipient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To_address { get; set; }

        /// <summary>
        /// The value that was transferred (in wei)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// The gas of the transaction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gas { get; set; }

        /// <summary>
        /// The gas price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gas_price { get; set; }

        /// <summary>
        /// The input
        /// </summary>
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Input { get; set; }

        /// <summary>
        /// The receipt cumulative gas used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receipt_cumulative_gas_used", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt_cumulative_gas_used { get; set; }

        /// <summary>
        /// The receipt gas used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receipt_gas_used", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt_gas_used { get; set; }

        /// <summary>
        /// The receipt contract address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receipt_contract_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt_contract_address { get; set; }

        /// <summary>
        /// The receipt root
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receipt_root", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt_root { get; set; }

        /// <summary>
        /// The receipt status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receipt_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt_status { get; set; }

        /// <summary>
        /// The block timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_timestamp { get; set; }

        /// <summary>
        /// The block number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The block hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_hash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Erc20Allowance
    {
        /// <summary>
        /// The allowance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Allowance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Erc20TokenBalance
    {
        /// <summary>
        /// The address of the token contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_address { get; set; }

        /// <summary>
        /// The name of the token contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// The logo of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// The thumbnail of the logo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        /// <summary>
        /// The number of decimals on the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimals { get; set; }

        /// <summary>
        /// Timestamp of when the contract was last synced with the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Balance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NativeBalance
    {
        /// <summary>
        /// The balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Balance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Trade
    {
        /// <summary>
        /// The transaction hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_hash { get; set; }

        /// <summary>
        /// The transaction index
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_index { get; set; }

        /// <summary>
        /// The token ID(s) traded
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Token_ids { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The address that sold the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seller_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Seller_address { get; set; }

        /// <summary>
        /// The address that bought the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyer_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Buyer_address { get; set; }

        /// <summary>
        /// The address of the contract that traded the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketplace_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Marketplace_address { get; set; }

        /// <summary>
        /// The value that was sent in the transaction (ETH/BNB/etc..)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Price { get; set; }

        /// <summary>
        /// The block timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_timestamp { get; set; }

        /// <summary>
        /// The block number of the transaction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The block hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_hash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TradeCollection
    {
        /// <summary>
        /// The total number of matches for this query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Trade> Result { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChainList
    {

        [System.Runtime.Serialization.EnumMember(Value = @"eth")]
        Eth = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"0x1")]
        _0x1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"goerli")]
        Goerli = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"0x5")]
        _0x5 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"sepolia")]
        Sepolia = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"0xaa36a7")]
        _0xaa36a7 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"polygon")]
        Polygon = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"0x89")]
        _0x89 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"mumbai")]
        Mumbai = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"0x13881")]
        _0x13881 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"bsc")]
        Bsc = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"0x38")]
        _0x38 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"bsc testnet")]
        Bsc_testnet = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"0x61")]
        _0x61 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"avalanche")]
        Avalanche = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"0xa86a")]
        _0xa86a = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"avalanche testnet")]
        Avalanche_testnet = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"0xa869")]
        _0xa869 = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"fantom")]
        Fantom = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"0xfa")]
        _0xfa = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"palm")]
        Palm = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"0x2a15c308d")]
        _0x2a15c308d = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"cronos")]
        Cronos = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"0x19")]
        _0x19 = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"cronos testnet")]
        Cronos_testnet = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"0x152")]
        _0x152 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"arbitrum")]
        Arbitrum = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"0xa4b1")]
        _0xa4b1 = 27,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Nft
    {
        /// <summary>
        /// The address of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_address { get; set; }

        /// <summary>
        /// The token ID of the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_id { get; set; }

        /// <summary>
        /// The wallet address of the owner of the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner_of", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner_of { get; set; }

        /// <summary>
        /// The token hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_hash { get; set; }

        /// <summary>
        /// The block number when the amount or owner changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The block number when the NFT was minted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number_minted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number_minted { get; set; }

        /// <summary>
        /// The type of NFT contract standard
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract_type { get; set; }

        /// <summary>
        /// The URI to the metadata of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_uri { get; set; }

        /// <summary>
        /// The metadata of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metadata { get; set; }

        /// <summary>
        /// A normalized metadata version of the NFT's metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("normalized_metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NormalizedMetadata Normalized_metadata { get; set; }

        /// <summary>
        /// A set of links to 'thumbnail / preview' media files
        /// </summary>
        [Newtonsoft.Json.JsonProperty("media_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Media Media_links { get; set; }

        /// <summary>
        /// The address that minted the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minter_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Minter_address { get; set; }

        /// <summary>
        /// When the token_uri was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_token_uri_sync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_token_uri_sync { get; set; }

        /// <summary>
        /// When the metadata was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_metadata_sync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_metadata_sync { get; set; }

        /// <summary>
        /// The quantity of this item that the user owns (used by ERC1155)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }

        /// <summary>
        /// The name of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NftMetadata
    {
        /// <summary>
        /// The token ID of the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_id { get; set; }

        /// <summary>
        /// The address of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_address { get; set; }

        /// <summary>
        /// The URI to the metadata of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_uri { get; set; }

        /// <summary>
        /// The metadata of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("is_valid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Is_valid { get; set; }

        [Newtonsoft.Json.JsonProperty("syncing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Syncing { get; set; }

        [Newtonsoft.Json.JsonProperty("frozen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Frozen { get; set; }

        [Newtonsoft.Json.JsonProperty("resyncing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Resyncing { get; set; }

        /// <summary>
        /// The type of NFT contract standard
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract_type { get; set; }

        [Newtonsoft.Json.JsonProperty("token_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_hash { get; set; }

        [Newtonsoft.Json.JsonProperty("batch_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Batch_id { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metadata_name { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata_description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metadata_description { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata_attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metadata_attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("block_number_minted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number_minted { get; set; }

        [Newtonsoft.Json.JsonProperty("opensea_lookup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Opensea_lookup { get; set; }

        [Newtonsoft.Json.JsonProperty("minter_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Minter_address { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_minted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_minted { get; set; }

        [Newtonsoft.Json.JsonProperty("frozen_log_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Frozen_log_index { get; set; }

        [Newtonsoft.Json.JsonProperty("imported", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Imported { get; set; }

        /// <summary>
        /// When the token_uri was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_token_uri_sync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_token_uri_sync { get; set; }

        /// <summary>
        /// When the metadata was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_metadata_sync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_metadata_sync { get; set; }

        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime CreatedAt { get; set; }

        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime UpdatedAt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NftWalletCollections
    {
        /// <summary>
        /// The syncing status of the address [SYNCING/SYNCED]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The total number of matches for this query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }

        /// <summary>
        /// The cursor to get to the next page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cursor { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NftCollections> Result { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NftCollection
    {
        /// <summary>
        /// The total number of matches for this query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }

        /// <summary>
        /// The cursor to get to the next page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cursor { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Nft> Result { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NftMetadataCollection
    {
        /// <summary>
        /// The total number of matches for this query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NftMetadata> Result { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NftCollections
    {
        /// <summary>
        /// The address of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_address { get; set; }

        /// <summary>
        /// The type of NFT contract standard
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract_type { get; set; }

        /// <summary>
        /// The name of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NftOwner
    {
        /// <summary>
        /// The address of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_address { get; set; }

        /// <summary>
        /// The token ID of the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_id { get; set; }

        /// <summary>
        /// The type of NFT contract standard
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract_type { get; set; }

        /// <summary>
        /// The wallet address of the owner of the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner_of", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner_of { get; set; }

        /// <summary>
        /// The block number when the amount or owner changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The block number when the NFT was minted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number_minted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number_minted { get; set; }

        /// <summary>
        /// The URI to the metadata of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_uri { get; set; }

        /// <summary>
        /// The metadata of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metadata { get; set; }

        /// <summary>
        /// A normalized metadata version of the NFT's metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("normalized_metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NormalizedMetadata Normalized_metadata { get; set; }

        /// <summary>
        /// A set of links to 'thumbnail / preview' media files
        /// </summary>
        [Newtonsoft.Json.JsonProperty("media_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Media Media_links { get; set; }

        /// <summary>
        /// The number of this item the user owns (used by ERC1155)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }

        /// <summary>
        /// The name of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// The token hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_hash { get; set; }

        /// <summary>
        /// When the token_uri was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_token_uri_sync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_token_uri_sync { get; set; }

        /// <summary>
        /// When the metadata was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_metadata_sync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_metadata_sync { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NormalizedMetadataAttribute
    {
        /// <summary>
        /// The trait title or descriptor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trait_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trait_type { get; set; }

        /// <summary>
        /// The value of the attribute
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        /// <summary>
        /// The type the attribute value should be displayed as
        /// </summary>
        [Newtonsoft.Json.JsonProperty("display_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Display_type { get; set; }

        /// <summary>
        /// For numeric values, the upper range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max_value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max_value { get; set; }

        /// <summary>
        /// The number of possible values for this trait
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trait_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Trait_count { get; set; }

        /// <summary>
        /// Order the trait should appear in the attribute list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Order { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NormalizedMetadata
    {
        /// <summary>
        /// The name or title of the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A detailed description of the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The URL of the NFT's image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        /// <summary>
        /// A link to additional information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("external_link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_link { get; set; }

        /// <summary>
        /// An animated version of the NFT's image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("animation_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Animation_url { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NormalizedMetadataAttribute> Attributes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MediaItem
    {
        /// <summary>
        /// The width of the preview image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        /// <summary>
        /// The height of the preview image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        /// <summary>
        /// The url of the preview file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MediaCollection
    {
        /// <summary>
        /// Information about the original media file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("original", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MediaItem Original { get; set; }

        /// <summary>
        /// Preview media file, lowest quality (for images 100px x 100px)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("low", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MediaItem Low { get; set; }

        /// <summary>
        /// Preview media file, medium quality (for images 250px x 250px)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MediaItem Medium { get; set; }

        /// <summary>
        /// Preview media file, highest quality (for images 500px x 500px)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("high", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MediaItem High { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Media
    {
        /// <summary>
        /// The mimetype of the media file [see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mimetype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mimetype { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MediaCategory Category { get; set; }

        /// <summary>
        /// The url of the original media file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("original_media_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Original_media_url { get; set; }

        /// <summary>
        /// Hash value of the original media file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parent_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parent_hash { get; set; }

        /// <summary>
        /// Preview item associated with the original
        /// </summary>
        [Newtonsoft.Json.JsonProperty("media_collection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MediaCollection Media_collection { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NftOwnerCollection
    {
        /// <summary>
        /// The syncing status of the address [SYNCING/SYNCED]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The total number of matches for this query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }

        /// <summary>
        /// The cursor to get to the next page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cursor { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NftOwner> Result { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NftTransfer
    {
        /// <summary>
        /// The address of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_address { get; set; }

        /// <summary>
        /// The token ID of the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_id { get; set; }

        /// <summary>
        /// The address that sent the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From_address { get; set; }

        /// <summary>
        /// The address that received the NFT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To_address { get; set; }

        /// <summary>
        /// The value that was sent in the transaction (ETH/BNB/etc..)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// The number of tokens transferred
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }

        /// <summary>
        /// The type of NFT contract standard
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract_type { get; set; }

        /// <summary>
        /// The block number of the transaction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The block timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_timestamp { get; set; }

        /// <summary>
        /// The block hash of the transaction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_hash { get; set; }

        /// <summary>
        /// The transaction hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_hash { get; set; }

        /// <summary>
        /// The transaction type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_type { get; set; }

        /// <summary>
        /// The transaction index
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Transaction_index { get; set; }

        /// <summary>
        /// The log index
        /// </summary>
        [Newtonsoft.Json.JsonProperty("log_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Log_index { get; set; }

        /// <summary>
        /// The operator present only for ERC1155 transfers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NftTransferCollection
    {
        /// <summary>
        /// The total number of matches for this query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page_size { get; set; }

        /// <summary>
        /// The cursor to get to the next page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cursor { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NftTransfer> Result { get; set; } = new System.Collections.ObjectModel.Collection<NftTransfer>();

        /// <summary>
        /// Indicator if the block exists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_exists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Block_exists { get; set; }

        /// <summary>
        /// Indicator if the block is fully indexed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index_complete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Index_complete { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NftContractMetadata
    {
        /// <summary>
        /// The address of the token contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_address { get; set; }

        /// <summary>
        /// The name of the token contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Timestamp of when the contract was last synced with the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("synced_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Synced_at { get; set; }

        /// <summary>
        /// The symbol of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// The type of NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract_type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NftContractMetadataCollection
    {
        /// <summary>
        /// The total number of matches for this query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page_size { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NftContractMetadata> Result { get; set; } = new System.Collections.ObjectModel.Collection<NftContractMetadata>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Erc20Transaction
    {
        /// <summary>
        /// The transaction hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_hash { get; set; }

        /// <summary>
        /// The address of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// The block timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_timestamp { get; set; }

        /// <summary>
        /// The block number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The block hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_hash { get; set; }

        /// <summary>
        /// The recipient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To_address { get; set; }

        /// <summary>
        /// The sender
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From_address { get; set; }

        /// <summary>
        /// The value that was transferred (in wei)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// The transaction index of the transfer within the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Transaction_index { get; set; }

        /// <summary>
        /// The log index of the transfer within the block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("log_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Log_index { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoricalNftTransfer
    {
        /// <summary>
        /// The transaction hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_hash { get; set; }

        /// <summary>
        /// The address of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// The block timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_timestamp { get; set; }

        /// <summary>
        /// The block number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The block hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_hash { get; set; }

        /// <summary>
        /// The recipient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To_address { get; set; }

        /// <summary>
        /// The sender
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From_address { get; set; }

        /// <summary>
        /// The token ids of the tokens that were transferred
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token_ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Token_ids { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The amounts that were transferred
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Amounts { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// They contract type of the transfer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract_type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Erc20Metadata
    {
        /// <summary>
        /// The address of the token contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// The name of the token contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// The number of decimals on the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Decimals { get; set; }

        /// <summary>
        /// The logo of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// The logo hash
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo_hash { get; set; }

        /// <summary>
        /// The thumbnail of the logo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        [Newtonsoft.Json.JsonProperty("validated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Validated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataResync
    {
        /// <summary>
        /// The status of the resync request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Erc721Metadata
    {
        /// <summary>
        /// The name of the token contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the NFT contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        [Newtonsoft.Json.JsonProperty("token_uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_uri { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Erc20Price
    {
        [Newtonsoft.Json.JsonProperty("nativePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NativeErc20Price NativePrice { get; set; }

        /// <summary>
        /// The price in USD for the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usdPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UsdPrice { get; set; }

        /// <summary>
        /// The address of the exchange used to calculate the price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exchangeAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExchangeAddress { get; set; }

        /// <summary>
        /// The name of the exchange used to calculate the price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exchangeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExchangeName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NativeErc20Price
    {
        /// <summary>
        /// The native price of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// The number of decimals on the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimals { get; set; }

        /// <summary>
        /// The name of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Erc20TransactionCollection
    {
        /// <summary>
        /// The total number of matches for this query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Erc20Transaction> Result { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ens
    {
        /// <summary>
        /// Resolved ENS address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Resolve
    {
        /// <summary>
        /// Resolved domain address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservesPair
    {
        [Newtonsoft.Json.JsonProperty("reserve0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reserve0 { get; set; }

        [Newtonsoft.Json.JsonProperty("reserve1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reserve1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservesCollection
    {
        [Newtonsoft.Json.JsonProperty("token0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Token0 Token0 { get; set; }

        [Newtonsoft.Json.JsonProperty("token1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Token1 Token1 { get; set; }

        [Newtonsoft.Json.JsonProperty("pairAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PairAddress { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IpfsFileRequest
    {
        /// <summary>
        /// Path to the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// Base64 or JSON
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IpfsFile
    {
        /// <summary>
        /// Path to the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Web3version
    {
        /// <summary>
        /// The version of the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointWeights
    {
        /// <summary>
        /// endpoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Endpoint { get; set; }

        /// <summary>
        /// The path to the endpoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// The number of hits the request counts towards rate limiting
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateLimitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateLimitCost { get; set; }

        /// <summary>
        /// The number of compute units the request counts towards billing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Price { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NativeBalances : System.Collections.ObjectModel.Collection<Anonymous>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
        Decimal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hex")]
        Hex = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
        Decimal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hex")]
        Hex = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Direction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"both")]
        Both = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"to")]
        To = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"from")]
        From = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
        Decimal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hex")]
        Hex = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
        Decimal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hex")]
        Hex = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
        Decimal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hex")]
        Hex = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
        Decimal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hex")]
        Hex = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Marketplace
    {

        [System.Runtime.Serialization.EnumMember(Value = @"opensea")]
        Opensea = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
        Decimal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hex")]
        Hex = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
        Decimal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hex")]
        Hex = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
        Decimal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hex")]
        Hex = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Flag
    {

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"metadata")]
        Metadata = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Mode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"async")]
        Async = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sync")]
        Sync = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Marketplace2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"opensea")]
        Opensea = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"decimal")]
        Decimal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hex")]
        Hex = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Filter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"attributes")]
        Attributes = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"name,description")]
        Name_description = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"name,attributes")]
        Name_attributes = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"description,attributes")]
        Description_attributes = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"name,description,attributes")]
        Name_description_attributes = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Currency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"eth")]
        Eth = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"0x1")]
        _0x1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Exchange
    {

        [System.Runtime.Serialization.EnumMember(Value = @"uniswapv2")]
        Uniswapv2 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"uniswapv3")]
        Uniswapv3 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"sushiswapv2")]
        Sushiswapv2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"pancakeswapv2")]
        Pancakeswapv2 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"pancakeswapv1")]
        Pancakeswapv1 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"quickswap")]
        Quickswap = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        /// <summary>
        /// The chain
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Chain { get; set; }

        /// <summary>
        /// The chain id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chain_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Chain_id { get; set; }

        /// <summary>
        /// The total balances for all the walttes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Total_balance { get; set; }

        /// <summary>
        /// The block Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        /// <summary>
        /// The block timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block_timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_timestamp { get; set; }

        /// <summary>
        /// The total balances for all the walttes formatted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_balance_formatted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Total_balance_formatted { get; set; }

        [Newtonsoft.Json.JsonProperty("wallet_balances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Wallet_balances> Wallet_balances { get; set; } = new System.Collections.ObjectModel.Collection<Wallet_balances>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        /// <summary>
        /// The total number of matches for this query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>
        /// The current page of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        /// <summary>
        /// The number of results per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LogEvent> Result { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {
        [Newtonsoft.Json.JsonProperty("reserve0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reserve0 { get; set; }

        [Newtonsoft.Json.JsonProperty("reserve1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reserve1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data
    {
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }

        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MediaCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"image")]
        Image = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"audio")]
        Audio = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"video")]
        Video = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Token0
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        [Newtonsoft.Json.JsonProperty("decimals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        [Newtonsoft.Json.JsonProperty("logo_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo_hash { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        [Newtonsoft.Json.JsonProperty("validated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Validated { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Token1
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        [Newtonsoft.Json.JsonProperty("decimals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Decimals { get; set; }

        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        [Newtonsoft.Json.JsonProperty("logo_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo_hash { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        [Newtonsoft.Json.JsonProperty("block_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block_number { get; set; }

        [Newtonsoft.Json.JsonProperty("validated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Validated { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Wallet_balances
    {
        /// <summary>
        /// address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Balance { get; set; }

        /// <summary>
        /// balance formatted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance_formatted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Balance_formatted { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603